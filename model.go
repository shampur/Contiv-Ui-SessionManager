package main

import "fmt"

//UserDetails stores user details
type UserDetails struct {
	Name string `json:"name"`
	Pwd  string `json:"pwd"`
}

//EtcdUserClass reader object
type EtcdUserClass struct {
	Name string `json:"name"`
	pwd  string
	Role string `json:"role"`
}

func (etcdUser *EtcdUserClass) getUserFromEtcd(username string) {
	//match the username from the database and return thebetcd object
	etcdUser.Name = "contiv1"
	etcdUser.Role = "admin"
	etcdUser.pwd = "pass123"

}

//UserClass returned to client
type UserClass struct {
	UserName          string `json:"userName"`
	UserRole          string `json:"userRole"`
	UserAuthenticated bool   `json:"userAuthenticated"`
	UserAuthorized    bool   `json:"userAuthorized"`
	ErrorMessage      string `json:"errorMessage"`
	Status            string `json:"status"`
}

func (user *UserClass) setDetails(name, role, status, err string, authorized, authenticated bool) {
	user.UserName = name
	user.UserRole = role
	user.ErrorMessage = err
	user.Status = status
	user.UserAuthorized = authorized
	user.UserAuthenticated = authenticated
}

func (user *UserClass) validateCredentials(userdetails UserDetails) bool {
	//fetch user details from etcd into etcdUserObject
	fmt.Println("validateCredentials")
	var etcduser EtcdUserClass
	etcduser.getUserFromEtcd(userdetails.Name)
	if userdetails.Name != "" &&
		userdetails.Name == etcduser.Name &&
		userdetails.Pwd != "" &&
		userdetails.Pwd == etcduser.pwd {
		user.setDetails(etcduser.Name, etcduser.Role, "success", "none", true, true)
	} else {
		user.setDetails("", "", "success", "none", false, false)
		return false
	}
	return true
}

/*
//Options for cookies
type Options struct {
	Path   string
	Domain string
	// MaxAge=0 means no 'Max-Age' attribute specified.
	// MaxAge<0 means delete cookie now, equivalently 'Max-Age: 0'.
	// MaxAge>0 means Max-Age attribute present and given in seconds.
	MaxAge   int
	Secure   bool
	HttpOnly bool
}

//Session field
type Session struct {
	// The ID of the session, generated by stores. It should not be used for
	// user data.
	ID string
	// Values contains the user-data for the session.
	Values  map[interface{}]interface{}
	Options *Options
	IsNew   bool
	name    string
}
*/
